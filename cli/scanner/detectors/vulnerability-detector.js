import axios from 'axios';
import { SQLInjectionDetector } from './sqli-detector.js';
import { XSSDetector } from './xss-detector.js';
import { SSRFDetector } from './ssrf-detector.js';
import { XXEDetector } from './xxe-detector.js';
import { SSTIDetector } from './ssti-detector.js';
import { CommandInjectionDetector } from './command-injection-detector.js';
import { LFIDetector } from './lfi-detector.js';
import { OpenRedirectDetector } from './open-redirect-detector.js';
import { IDORDetector } from './idor-detector.js';
import { CSRFDetector } from './csrf-detector.js';
import { SecurityHeadersDetector } from './security-headers-detector.js';
import { CORSDetector } from './cors-detector.js';
import { RaceConditionDetector } from './race-condition-detector.js';

export class VulnerabilityDetector {
  constructor() {
    this.detectors = [
      new SQLInjectionDetector(),
      new XSSDetector(),
      new SSRFDetector(),
      new XXEDetector(),
      new SSTIDetector(),
      new CommandInjectionDetector(),
      new LFIDetector(),
      new OpenRedirectDetector(),
      new IDORDetector(),
      new CSRFDetector(),
      new SecurityHeadersDetector(),
      new CORSDetector(),
      new RaceConditionDetector()
    ];
  }

  async detectVulnerabilities(endpoint) {
    const vulnerabilities = [];

    for (const detector of this.detectors) {
      try {
        const vulns = await detector.detect(endpoint);
        vulnerabilities.push(...vulns);
      } catch (error) {
        console.error(`Error in ${detector.constructor.name}:`, error.message);
      }
    }

    return vulnerabilities;
  }
}
